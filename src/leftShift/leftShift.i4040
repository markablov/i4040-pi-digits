JMS entrypoint

# INPUT:
#   rr0 - variable number (06..0B)
#   rr1 - index of MSW
#   rr2 - shift value
#   rr3 - 4 - shift value
# VARIABLES:
#   rr13 - high shifted bits from previous digit
#   rr12 - low shifted bits from current digit
#   rr5 - loop iterator
# NOTES:
#   There is special case for long division with 16-word number dividend. This number ends with few 0s, so we perform
#   normalization step for such numbers by pretending that it has 17 digits, by safely replacing dividend[0] with
#   dividend[16]. This function should handle such case.
shiftLeftVarFromMainMemory:
  LDM 0x2
  XCH rr6
  LD rr1
  CMA
  JCN nz, shiftLeftVarFromMainMemory_normalVar
  IAC
  IAC
shiftLeftVarFromMainMemory_normalVar:
  XCH rr5                                   # rr5 = len(var) === 16 ? 2 : (16 - len(var))
  INC rr1
  INC rr1
shiftLeftVarFromMainMemory_loop:
  LD rr1
  SUB rr6
  CLC
  XCH rr1
  SRC r0
  RDM
  XCH rr12
  LD rr3
  JMS shiftRight                            # rr12 = var[i - 1] >> (4 - s)
  INC rr1
  SRC r0
  RDM
  XCH rr13
  LD rr2
  JMS shiftLeft                             # rr13 = var[i] << s
  LD rr13
  ADD rr12
  WRM                                       # var[i] = (var[i] << s) | (var[i - 1] >> (4 - s))
  ISZ rr5, shiftLeftVarFromMainMemory_loop
  LD rr1
  DAC
  CLC
  XCH rr1
  SRC r0
  RDM
  XCH rr13
  LD rr2
  JMS shiftLeft
  LD rr13                                   # var[0] = var[0] << s
  WRM
shiftLeftVarFromMainMemory_ret:
  BBL 0

# INPUT:
#   acc - shift value
#   rr12 - value
# OUTPUT:
#   rr12 - shifted value
shiftRight:
  CMA
  IAC
  XCH rr14
  LD rr12
shiftRight_loop:
  RAR
  CLC
  ISZ rr14, shiftRight_loop
  XCH rr12
  BBL 0

# INPUT:
#   acc - shift value
#   rr13 - value
# OUTPUT:
#   rr13 - shifted value
shiftLeft:
  CMA
  IAC
  XCH rr14
  LD rr13
shiftLeft_loop:
  RAL
  CLC
  ISZ rr14, shiftLeft_loop
  XCH rr13
  BBL 0

entrypoint:
  JMS shiftLeftVarFromMainMemory
